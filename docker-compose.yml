version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: casperdev-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: casperdev
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - casperdev-network

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: casperdev-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - casperdev-network

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: casperdev-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/casperdev?authSource=admin
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=casperdev-docker-secret-key
      - CLIENT_URL=http://localhost:3000
    depends_on:
      - mongodb
      - redis
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - casperdev-network

  # Frontend React App
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: casperdev-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_SOCKET_URL=http://localhost:5000
    depends_on:
      - backend
    volumes:
      - ./client:/app
      - /app/node_modules
    stdin_open: true
    tty: true
    networks:
      - casperdev-network

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: casperdev-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=password
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
      - N8N_PERSISTED_BINARY_DATA_TTL=1440
    volumes:
      - n8n_data:/home/node/.n8n
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - casperdev-network
    depends_on:
      - mongodb
      - redis

  # Ollama for Local LLaMA Models
  ollama:
    image: ollama/ollama:latest
    container_name: casperdev-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - casperdev-network
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
    # Uncomment these lines if you have NVIDIA GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # Pieces OS Backend
  pieces-os:
    image: pieces/pieces-os:latest
    container_name: casperdev-pieces-os
    restart: unless-stopped
    ports:
      - "1000:1000"  # Pieces OS API port
    volumes:
      - pieces_data:/app/data
    networks:
      - casperdev-network
    environment:
      - PIECES_OS_PORT=1000
      - PIECES_OS_HOST=0.0.0.0

volumes:
  mongodb_data:
  redis_data:
  n8n_data:
  ollama_data:
  pieces_data:

networks:
  casperdev-network:
    driver: bridge