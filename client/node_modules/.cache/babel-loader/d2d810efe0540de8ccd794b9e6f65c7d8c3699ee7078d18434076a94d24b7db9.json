{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import io from'socket.io-client';import{useAuth}from'./AuthContext';import{toast}from'react-toastify';import{jsx as _jsx}from\"react/jsx-runtime\";const SocketContext=/*#__PURE__*/createContext();export const useSocket=()=>{const context=useContext(SocketContext);if(!context){throw new Error('useSocket must be used within a SocketProvider');}return context;};export const SocketProvider=_ref=>{let{children}=_ref;const[socket,setSocket]=useState(null);const[connected,setConnected]=useState(false);const[onlineUsers,setOnlineUsers]=useState([]);const[messages,setMessages]=useState([]);const[activeRoom,setActiveRoom]=useState(null);const{user,isAuthenticated}=useAuth();useEffect(()=>{if(isAuthenticated&&user){// Connect to socket server\nconst newSocket=io(process.env.REACT_APP_SOCKET_URL||'http://localhost:5000',{auth:{userId:user.id,username:user.username},transports:['websocket','polling']});newSocket.on('connect',()=>{console.log('✅ Connected to real-time server');setConnected(true);toast.success('Real-time connection established');});newSocket.on('disconnect',()=>{console.log('❌ Disconnected from real-time server');setConnected(false);toast.warn('Real-time connection lost');});newSocket.on('connect_error',error=>{console.error('Socket connection error:',error);toast.error('Failed to establish real-time connection');});// Handle user-joined event\nnewSocket.on('user-joined',userId=>{console.log(`User ${userId} joined the room`);setOnlineUsers(prev=>[...prev,userId]);});// Handle incoming messages\nnewSocket.on('receive-message',messageData=>{console.log('New message received:',messageData);setMessages(prev=>[...prev,messageData]);// Show notification if not in the active room\nif(activeRoom!==messageData.room){toast.info(`New message from ${messageData.sender}`);}});// Handle user status updates\nnewSocket.on('user-status-update',statusData=>{console.log('User status update:',statusData);// Update user status in your application\n});// Handle connection notifications\nnewSocket.on('connection-request',requestData=>{toast.info(`New connection request from ${requestData.senderUsername}`);});newSocket.on('connection-accepted',connectionData=>{toast.success(`Connection accepted by ${connectionData.username}`);});setSocket(newSocket);// Cleanup on unmount\nreturn()=>{newSocket.disconnect();setSocket(null);setConnected(false);setOnlineUsers([]);setMessages([]);};}},[isAuthenticated,user,activeRoom]);const joinRoom=roomId=>{if(socket&&connected){socket.emit('join-room',roomId);setActiveRoom(roomId);console.log(`Joined room: ${roomId}`);}};const leaveRoom=roomId=>{if(socket&&connected){socket.emit('leave-room',roomId);if(activeRoom===roomId){setActiveRoom(null);}console.log(`Left room: ${roomId}`);}};const sendMessage=(roomId,message)=>{if(socket&&connected){const messageData={room:roomId,message:message,timestamp:new Date().toISOString()};socket.emit('send-message',messageData);// Add to local messages immediately\nsetMessages(prev=>[...prev,{...messageData,sender:user.id,senderUsername:user.username,isOwn:true}]);console.log('Message sent:',messageData);}else{toast.error('Not connected to real-time server');}};const sendNotification=(userId,notificationData)=>{if(socket&&connected){socket.emit('send-notification',{targetUserId:userId,...notificationData});}};const updateUserStatus=status=>{if(socket&&connected){socket.emit('update-status',{userId:user.id,status:status,timestamp:new Date().toISOString()});}};const getConnectionStatus=()=>{return{connected,socket:!!socket,activeRoom,onlineUsersCount:onlineUsers.length};};const clearMessages=()=>{setMessages([]);};const value={socket,connected,onlineUsers,messages,activeRoom,joinRoom,leaveRoom,sendMessage,sendNotification,updateUserStatus,getConnectionStatus,clearMessages,isConnected:connected&&!!socket};return/*#__PURE__*/_jsx(SocketContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","useAuth","toast","jsx","_jsx","SocketContext","useSocket","context","Error","SocketProvider","_ref","children","socket","setSocket","connected","setConnected","onlineUsers","setOnlineUsers","messages","setMessages","activeRoom","setActiveRoom","user","isAuthenticated","newSocket","process","env","REACT_APP_SOCKET_URL","auth","userId","id","username","transports","on","console","log","success","warn","error","prev","messageData","room","info","sender","statusData","requestData","senderUsername","connectionData","disconnect","joinRoom","roomId","emit","leaveRoom","sendMessage","message","timestamp","Date","toISOString","isOwn","sendNotification","notificationData","targetUserId","updateUserStatus","status","getConnectionStatus","onlineUsersCount","length","clearMessages","value","isConnected","Provider"],"sources":["/workspace/client/src/contexts/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { useAuth } from './AuthContext';\nimport { toast } from 'react-toastify';\n\nconst SocketContext = createContext();\n\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n\nexport const SocketProvider = ({ children }) => {\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [activeRoom, setActiveRoom] = useState(null);\n  const { user, isAuthenticated } = useAuth();\n\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      // Connect to socket server\n      const newSocket = io(process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000', {\n        auth: {\n          userId: user.id,\n          username: user.username\n        },\n        transports: ['websocket', 'polling']\n      });\n\n      newSocket.on('connect', () => {\n        console.log('✅ Connected to real-time server');\n        setConnected(true);\n        toast.success('Real-time connection established');\n      });\n\n      newSocket.on('disconnect', () => {\n        console.log('❌ Disconnected from real-time server');\n        setConnected(false);\n        toast.warn('Real-time connection lost');\n      });\n\n      newSocket.on('connect_error', (error) => {\n        console.error('Socket connection error:', error);\n        toast.error('Failed to establish real-time connection');\n      });\n\n      // Handle user-joined event\n      newSocket.on('user-joined', (userId) => {\n        console.log(`User ${userId} joined the room`);\n        setOnlineUsers(prev => [...prev, userId]);\n      });\n\n      // Handle incoming messages\n      newSocket.on('receive-message', (messageData) => {\n        console.log('New message received:', messageData);\n        setMessages(prev => [...prev, messageData]);\n        \n        // Show notification if not in the active room\n        if (activeRoom !== messageData.room) {\n          toast.info(`New message from ${messageData.sender}`);\n        }\n      });\n\n      // Handle user status updates\n      newSocket.on('user-status-update', (statusData) => {\n        console.log('User status update:', statusData);\n        // Update user status in your application\n      });\n\n      // Handle connection notifications\n      newSocket.on('connection-request', (requestData) => {\n        toast.info(`New connection request from ${requestData.senderUsername}`);\n      });\n\n      newSocket.on('connection-accepted', (connectionData) => {\n        toast.success(`Connection accepted by ${connectionData.username}`);\n      });\n\n      setSocket(newSocket);\n\n      // Cleanup on unmount\n      return () => {\n        newSocket.disconnect();\n        setSocket(null);\n        setConnected(false);\n        setOnlineUsers([]);\n        setMessages([]);\n      };\n    }\n  }, [isAuthenticated, user, activeRoom]);\n\n  const joinRoom = (roomId) => {\n    if (socket && connected) {\n      socket.emit('join-room', roomId);\n      setActiveRoom(roomId);\n      console.log(`Joined room: ${roomId}`);\n    }\n  };\n\n  const leaveRoom = (roomId) => {\n    if (socket && connected) {\n      socket.emit('leave-room', roomId);\n      if (activeRoom === roomId) {\n        setActiveRoom(null);\n      }\n      console.log(`Left room: ${roomId}`);\n    }\n  };\n\n  const sendMessage = (roomId, message) => {\n    if (socket && connected) {\n      const messageData = {\n        room: roomId,\n        message: message,\n        timestamp: new Date().toISOString()\n      };\n      \n      socket.emit('send-message', messageData);\n      \n      // Add to local messages immediately\n      setMessages(prev => [...prev, {\n        ...messageData,\n        sender: user.id,\n        senderUsername: user.username,\n        isOwn: true\n      }]);\n      \n      console.log('Message sent:', messageData);\n    } else {\n      toast.error('Not connected to real-time server');\n    }\n  };\n\n  const sendNotification = (userId, notificationData) => {\n    if (socket && connected) {\n      socket.emit('send-notification', {\n        targetUserId: userId,\n        ...notificationData\n      });\n    }\n  };\n\n  const updateUserStatus = (status) => {\n    if (socket && connected) {\n      socket.emit('update-status', {\n        userId: user.id,\n        status: status,\n        timestamp: new Date().toISOString()\n      });\n    }\n  };\n\n  const getConnectionStatus = () => {\n    return {\n      connected,\n      socket: !!socket,\n      activeRoom,\n      onlineUsersCount: onlineUsers.length\n    };\n  };\n\n  const clearMessages = () => {\n    setMessages([]);\n  };\n\n  const value = {\n    socket,\n    connected,\n    onlineUsers,\n    messages,\n    activeRoom,\n    joinRoom,\n    leaveRoom,\n    sendMessage,\n    sendNotification,\n    updateUserStatus,\n    getConnectionStatus,\n    clearMessages,\n    isConnected: connected && !!socket\n  };\n\n  return (\n    <SocketContext.Provider value={value}>\n      {children}\n    </SocketContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}