{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import axios from'axios';import{toast}from'react-toastify';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[token,setToken]=useState(localStorage.getItem('token'));// Configure axios defaults\nuseEffect(()=>{if(token){axios.defaults.headers.common['Authorization']=`Bearer ${token}`;}else{delete axios.defaults.headers.common['Authorization'];}},[token]);// Check authentication status on app load\nuseEffect(()=>{const checkAuth=async()=>{if(token){try{const response=await axios.get('/api/auth/me');setUser(response.data.user);toast.success('Connected successfully');}catch(error){console.error('Authentication check failed:',error);localStorage.removeItem('token');setToken(null);setUser(null);toast.error('Connection expired, please login again');}}setLoading(false);};checkAuth();},[token]);const login=async credentials=>{try{setLoading(true);const response=await axios.post('/api/auth/login',credentials);const{token:newToken,user:userData}=response.data;localStorage.setItem('token',newToken);setToken(newToken);setUser(userData);toast.success(`Welcome back, ${userData.username}! You are now connected.`);return{success:true};}catch(error){var _error$response,_error$response$data;const errorMessage=((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||'Connection failed';toast.error(errorMessage);return{success:false,error:errorMessage};}finally{setLoading(false);}};const register=async userData=>{try{setLoading(true);const response=await axios.post('/api/auth/register',userData);const{token:newToken,user:newUser}=response.data;localStorage.setItem('token',newToken);setToken(newToken);setUser(newUser);toast.success(`Welcome, ${newUser.username}! Your account is now connected.`);return{success:true};}catch(error){var _error$response2,_error$response2$data;const errorMessage=((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||'Registration failed';toast.error(errorMessage);return{success:false,error:errorMessage};}finally{setLoading(false);}};const logout=async()=>{try{await axios.post('/api/auth/logout');}catch(error){console.error('Logout error:',error);}finally{localStorage.removeItem('token');setToken(null);setUser(null);delete axios.defaults.headers.common['Authorization'];toast.info('Disconnected successfully');}};const updateUser=updatedUser=>{setUser(prev=>({...prev,...updatedUser}));};const connectToUser=async userId=>{try{const response=await axios.post(`/api/users/${userId}/connect`);toast.success('Connection request sent successfully');return{success:true,data:response.data};}catch(error){var _error$response3,_error$response3$data;const errorMessage=((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.error)||'Failed to send connection request';toast.error(errorMessage);return{success:false,error:errorMessage};}};const updateConnection=async(userId,status)=>{try{const response=await axios.put(`/api/users/${userId}/connection`,{status});toast.success(`Connection ${status} successfully`);return{success:true,data:response.data};}catch(error){var _error$response4,_error$response4$data;const errorMessage=((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.error)||'Failed to update connection';toast.error(errorMessage);return{success:false,error:errorMessage};}};const checkConnectionHealth=async()=>{try{const response=await axios.get('/api/health');return response.data;}catch(error){console.error('Health check failed:',error);return null;}};const value={user,loading,token,login,register,logout,updateUser,connectToUser,updateConnection,checkConnectionHealth,isAuthenticated:!!user};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","toast","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","token","setToken","localStorage","getItem","defaults","headers","common","checkAuth","response","get","data","success","error","console","removeItem","login","credentials","post","newToken","userData","setItem","username","_error$response","_error$response$data","errorMessage","register","newUser","_error$response2","_error$response2$data","logout","info","updateUser","updatedUser","prev","connectToUser","userId","_error$response3","_error$response3$data","updateConnection","status","put","_error$response4","_error$response4$data","checkConnectionHealth","value","isAuthenticated","Provider"],"sources":["/workspace/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n\n  // Configure axios defaults\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  }, [token]);\n\n  // Check authentication status on app load\n  useEffect(() => {\n    const checkAuth = async () => {\n      if (token) {\n        try {\n          const response = await axios.get('/api/auth/me');\n          setUser(response.data.user);\n          toast.success('Connected successfully');\n        } catch (error) {\n          console.error('Authentication check failed:', error);\n          localStorage.removeItem('token');\n          setToken(null);\n          setUser(null);\n          toast.error('Connection expired, please login again');\n        }\n      }\n      setLoading(false);\n    };\n\n    checkAuth();\n  }, [token]);\n\n  const login = async (credentials) => {\n    try {\n      setLoading(true);\n      const response = await axios.post('/api/auth/login', credentials);\n      \n      const { token: newToken, user: userData } = response.data;\n      \n      localStorage.setItem('token', newToken);\n      setToken(newToken);\n      setUser(userData);\n      \n      toast.success(`Welcome back, ${userData.username}! You are now connected.`);\n      return { success: true };\n    } catch (error) {\n      const errorMessage = error.response?.data?.error || 'Connection failed';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      setLoading(true);\n      const response = await axios.post('/api/auth/register', userData);\n      \n      const { token: newToken, user: newUser } = response.data;\n      \n      localStorage.setItem('token', newToken);\n      setToken(newToken);\n      setUser(newUser);\n      \n      toast.success(`Welcome, ${newUser.username}! Your account is now connected.`);\n      return { success: true };\n    } catch (error) {\n      const errorMessage = error.response?.data?.error || 'Registration failed';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await axios.post('/api/auth/logout');\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      localStorage.removeItem('token');\n      setToken(null);\n      setUser(null);\n      delete axios.defaults.headers.common['Authorization'];\n      toast.info('Disconnected successfully');\n    }\n  };\n\n  const updateUser = (updatedUser) => {\n    setUser(prev => ({ ...prev, ...updatedUser }));\n  };\n\n  const connectToUser = async (userId) => {\n    try {\n      const response = await axios.post(`/api/users/${userId}/connect`);\n      toast.success('Connection request sent successfully');\n      return { success: true, data: response.data };\n    } catch (error) {\n      const errorMessage = error.response?.data?.error || 'Failed to send connection request';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  const updateConnection = async (userId, status) => {\n    try {\n      const response = await axios.put(`/api/users/${userId}/connection`, { status });\n      toast.success(`Connection ${status} successfully`);\n      return { success: true, data: response.data };\n    } catch (error) {\n      const errorMessage = error.response?.data?.error || 'Failed to update connection';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  const checkConnectionHealth = async () => {\n    try {\n      const response = await axios.get('/api/health');\n      return response.data;\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return null;\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    token,\n    login,\n    register,\n    logout,\n    updateUser,\n    connectToUser,\n    updateConnection,\n    checkConnectionHealth,\n    isAuthenticated: !!user\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}