{"ast":null,"code":"var _jsxFileName = \"/workspace/client/src/contexts/SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { useAuth } from './AuthContext';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const useSocket = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [activeRoom, setActiveRoom] = useState(null);\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      // Connect to socket server\n      const newSocket = io(process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000', {\n        auth: {\n          userId: user.id,\n          username: user.username\n        },\n        transports: ['websocket', 'polling']\n      });\n      newSocket.on('connect', () => {\n        console.log('✅ Connected to real-time server');\n        setConnected(true);\n        toast.success('Real-time connection established');\n      });\n      newSocket.on('disconnect', () => {\n        console.log('❌ Disconnected from real-time server');\n        setConnected(false);\n        toast.warn('Real-time connection lost');\n      });\n      newSocket.on('connect_error', error => {\n        console.error('Socket connection error:', error);\n        toast.error('Failed to establish real-time connection');\n      });\n\n      // Handle user-joined event\n      newSocket.on('user-joined', userId => {\n        console.log(`User ${userId} joined the room`);\n        setOnlineUsers(prev => [...prev, userId]);\n      });\n\n      // Handle incoming messages\n      newSocket.on('receive-message', messageData => {\n        console.log('New message received:', messageData);\n        setMessages(prev => [...prev, messageData]);\n\n        // Show notification if not in the active room\n        if (activeRoom !== messageData.room) {\n          toast.info(`New message from ${messageData.sender}`);\n        }\n      });\n\n      // Handle user status updates\n      newSocket.on('user-status-update', statusData => {\n        console.log('User status update:', statusData);\n        // Update user status in your application\n      });\n\n      // Handle connection notifications\n      newSocket.on('connection-request', requestData => {\n        toast.info(`New connection request from ${requestData.senderUsername}`);\n      });\n      newSocket.on('connection-accepted', connectionData => {\n        toast.success(`Connection accepted by ${connectionData.username}`);\n      });\n      setSocket(newSocket);\n\n      // Cleanup on unmount\n      return () => {\n        newSocket.disconnect();\n        setSocket(null);\n        setConnected(false);\n        setOnlineUsers([]);\n        setMessages([]);\n      };\n    }\n  }, [isAuthenticated, user, activeRoom]);\n  const joinRoom = roomId => {\n    if (socket && connected) {\n      socket.emit('join-room', roomId);\n      setActiveRoom(roomId);\n      console.log(`Joined room: ${roomId}`);\n    }\n  };\n  const leaveRoom = roomId => {\n    if (socket && connected) {\n      socket.emit('leave-room', roomId);\n      if (activeRoom === roomId) {\n        setActiveRoom(null);\n      }\n      console.log(`Left room: ${roomId}`);\n    }\n  };\n  const sendMessage = (roomId, message) => {\n    if (socket && connected) {\n      const messageData = {\n        room: roomId,\n        message: message,\n        timestamp: new Date().toISOString()\n      };\n      socket.emit('send-message', messageData);\n\n      // Add to local messages immediately\n      setMessages(prev => [...prev, {\n        ...messageData,\n        sender: user.id,\n        senderUsername: user.username,\n        isOwn: true\n      }]);\n      console.log('Message sent:', messageData);\n    } else {\n      toast.error('Not connected to real-time server');\n    }\n  };\n  const sendNotification = (userId, notificationData) => {\n    if (socket && connected) {\n      socket.emit('send-notification', {\n        targetUserId: userId,\n        ...notificationData\n      });\n    }\n  };\n  const updateUserStatus = status => {\n    if (socket && connected) {\n      socket.emit('update-status', {\n        userId: user.id,\n        status: status,\n        timestamp: new Date().toISOString()\n      });\n    }\n  };\n  const getConnectionStatus = () => {\n    return {\n      connected,\n      socket: !!socket,\n      activeRoom,\n      onlineUsersCount: onlineUsers.length\n    };\n  };\n  const clearMessages = () => {\n    setMessages([]);\n  };\n  const value = {\n    socket,\n    connected,\n    onlineUsers,\n    messages,\n    activeRoom,\n    joinRoom,\n    leaveRoom,\n    sendMessage,\n    sendNotification,\n    updateUserStatus,\n    getConnectionStatus,\n    clearMessages,\n    isConnected: connected && !!socket\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n};\n_s2(SocketProvider, \"8P505MfSujEhnl+zynPDjm6YLEQ=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","useAuth","toast","jsxDEV","_jsxDEV","SocketContext","useSocket","_s","context","Error","SocketProvider","children","_s2","socket","setSocket","connected","setConnected","onlineUsers","setOnlineUsers","messages","setMessages","activeRoom","setActiveRoom","user","isAuthenticated","newSocket","process","env","REACT_APP_SOCKET_URL","auth","userId","id","username","transports","on","console","log","success","warn","error","prev","messageData","room","info","sender","statusData","requestData","senderUsername","connectionData","disconnect","joinRoom","roomId","emit","leaveRoom","sendMessage","message","timestamp","Date","toISOString","isOwn","sendNotification","notificationData","targetUserId","updateUserStatus","status","getConnectionStatus","onlineUsersCount","length","clearMessages","value","isConnected","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspace/client/src/contexts/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { useAuth } from './AuthContext';\nimport { toast } from 'react-toastify';\n\nconst SocketContext = createContext();\n\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n\nexport const SocketProvider = ({ children }) => {\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [activeRoom, setActiveRoom] = useState(null);\n  const { user, isAuthenticated } = useAuth();\n\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      // Connect to socket server\n      const newSocket = io(process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000', {\n        auth: {\n          userId: user.id,\n          username: user.username\n        },\n        transports: ['websocket', 'polling']\n      });\n\n      newSocket.on('connect', () => {\n        console.log('✅ Connected to real-time server');\n        setConnected(true);\n        toast.success('Real-time connection established');\n      });\n\n      newSocket.on('disconnect', () => {\n        console.log('❌ Disconnected from real-time server');\n        setConnected(false);\n        toast.warn('Real-time connection lost');\n      });\n\n      newSocket.on('connect_error', (error) => {\n        console.error('Socket connection error:', error);\n        toast.error('Failed to establish real-time connection');\n      });\n\n      // Handle user-joined event\n      newSocket.on('user-joined', (userId) => {\n        console.log(`User ${userId} joined the room`);\n        setOnlineUsers(prev => [...prev, userId]);\n      });\n\n      // Handle incoming messages\n      newSocket.on('receive-message', (messageData) => {\n        console.log('New message received:', messageData);\n        setMessages(prev => [...prev, messageData]);\n        \n        // Show notification if not in the active room\n        if (activeRoom !== messageData.room) {\n          toast.info(`New message from ${messageData.sender}`);\n        }\n      });\n\n      // Handle user status updates\n      newSocket.on('user-status-update', (statusData) => {\n        console.log('User status update:', statusData);\n        // Update user status in your application\n      });\n\n      // Handle connection notifications\n      newSocket.on('connection-request', (requestData) => {\n        toast.info(`New connection request from ${requestData.senderUsername}`);\n      });\n\n      newSocket.on('connection-accepted', (connectionData) => {\n        toast.success(`Connection accepted by ${connectionData.username}`);\n      });\n\n      setSocket(newSocket);\n\n      // Cleanup on unmount\n      return () => {\n        newSocket.disconnect();\n        setSocket(null);\n        setConnected(false);\n        setOnlineUsers([]);\n        setMessages([]);\n      };\n    }\n  }, [isAuthenticated, user, activeRoom]);\n\n  const joinRoom = (roomId) => {\n    if (socket && connected) {\n      socket.emit('join-room', roomId);\n      setActiveRoom(roomId);\n      console.log(`Joined room: ${roomId}`);\n    }\n  };\n\n  const leaveRoom = (roomId) => {\n    if (socket && connected) {\n      socket.emit('leave-room', roomId);\n      if (activeRoom === roomId) {\n        setActiveRoom(null);\n      }\n      console.log(`Left room: ${roomId}`);\n    }\n  };\n\n  const sendMessage = (roomId, message) => {\n    if (socket && connected) {\n      const messageData = {\n        room: roomId,\n        message: message,\n        timestamp: new Date().toISOString()\n      };\n      \n      socket.emit('send-message', messageData);\n      \n      // Add to local messages immediately\n      setMessages(prev => [...prev, {\n        ...messageData,\n        sender: user.id,\n        senderUsername: user.username,\n        isOwn: true\n      }]);\n      \n      console.log('Message sent:', messageData);\n    } else {\n      toast.error('Not connected to real-time server');\n    }\n  };\n\n  const sendNotification = (userId, notificationData) => {\n    if (socket && connected) {\n      socket.emit('send-notification', {\n        targetUserId: userId,\n        ...notificationData\n      });\n    }\n  };\n\n  const updateUserStatus = (status) => {\n    if (socket && connected) {\n      socket.emit('update-status', {\n        userId: user.id,\n        status: status,\n        timestamp: new Date().toISOString()\n      });\n    }\n  };\n\n  const getConnectionStatus = () => {\n    return {\n      connected,\n      socket: !!socket,\n      activeRoom,\n      onlineUsersCount: onlineUsers.length\n    };\n  };\n\n  const clearMessages = () => {\n    setMessages([]);\n  };\n\n  const value = {\n    socket,\n    connected,\n    onlineUsers,\n    messages,\n    activeRoom,\n    joinRoom,\n    leaveRoom,\n    sendMessage,\n    sendNotification,\n    updateUserStatus,\n    getConnectionStatus,\n    clearMessages,\n    isConnected: connected && !!socket\n  };\n\n  return (\n    <SocketContext.Provider value={value}>\n      {children}\n    </SocketContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}